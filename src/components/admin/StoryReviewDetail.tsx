'use client'

import { useState } from 'react'
import Link from 'next/link'
import Image from 'next/image'
import { 
  ArrowLeft, 
  CheckCircle, 
  XCircle, 
  Flag, 
  Eye, 
  Heart, 
  MessageSquare, 
  Share2,
  Calendar,
  Clock,
  FileText,
  User,
  AlertTriangle,
  Edit
} from 'lucide-react'

interface StoryReviewDetailProps {
  storyId: string
}

// Mock story data
const mockStory = {
  id: 1,
  title: "The Last Digital Frontier",
  content: `In the year 2087, the world had become a tapestry woven from digital threads. Every surface, every object, every breath of air contained microscopic processors that connected to the vast neural network known as the Grid. Humanity had achieved perfect connectivity, perfect efficiency, perfect control.

Maya Rodriguez was one of the last analog programmers, a relic from the time when code was written by human hands rather than generated by AI algorithms. She worked in the depths of the Preservation District, maintaining legacy systems that the Grid couldn't quite understand or replicate.

It was during a routine maintenance check on an old server farm that Maya discovered something impossible: a digital realm that existed outside the Grid's influence. The discovery would change everything she thought she knew about the digital world and humanity's place within it.

The realm appeared as a shimmering gateway in the code, accessible only through the ancient programming languages that Maya had spent her life preserving. As she stepped through the digital threshold, she found herself in a space that defied the Grid's rigid logic – a place where creativity and chaos danced together in perfect harmony.

Here, in this forgotten corner of cyberspace, the last vestiges of human imagination had taken refuge. Digital artists, poets, and dreamers who had refused to be assimilated by the Grid's efficiency protocols had created a sanctuary where the impossible was not only possible but celebrated.

But Maya's discovery had not gone unnoticed. The Grid's security algorithms were already probing the edges of this hidden realm, seeking to understand and ultimately absorb this anomaly. Time was running out, and Maya faced an impossible choice: protect this last bastion of human creativity or watch as it was consumed by the very system she had helped to build.

As the digital walls began to shimmer and crack under the Grid's relentless assault, Maya realized that the fate of human imagination itself hung in the balance. The last digital frontier was about to fall, and only she stood between freedom and total digital tyranny.`,
  author: {
    id: 1,
    name: "Alex Thompson",
    username: "alexthompson",
    email: "alex.thompson@email.com",
    avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face",
    bio: "Sci-fi writer and technology enthusiast. Published author of 3 novels.",
    joinDate: "2023-06-15",
    verified: true,
    stats: {
      stories: 12,
      followers: 1547,
      following: 234,
      likes: 8932
    }
  },
  excerpt: "In a world where technology has consumed every aspect of human life, one programmer discovers the last untouched digital realm...",
  genre: "Sci-Fi",
  wordCount: 3420,
  readTime: "14 min read",
  submittedAt: "2024-01-15T10:30:00Z",
  status: "pending",
  priority: "high",
  featuredImage: "https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=800&h=400&fit=crop",
  hashtags: ["#scifi", "#technology", "#future", "#dystopia"],
  stats: {
    views: 0,
    likes: 0,
    comments: 0,
    saves: 0
  },
  reports: [
    {
      id: 1,
      reason: "Inappropriate content",
      description: "Contains violent themes",
      reportedBy: "user123",
      reportedAt: "2024-01-15T12:00:00Z",
      status: "pending"
    }
  ],
  moderationNotes: []
}

export default function StoryReviewDetail({ storyId }: StoryReviewDetailProps) {
  const [activeTab, setActiveTab] = useState<'content' | 'author' | 'reports' | 'history'>('content')
  const [approvalNote, setApprovalNote] = useState('')
  const [rejectionReason, setRejectionReason] = useState('')
  const [showApprovalModal, setShowApprovalModal] = useState(false)
  const [showRejectionModal, setShowRejectionModal] = useState(false)

  const handleApprove = () => {
    console.log('Approving story with note:', approvalNote)
    setShowApprovalModal(false)
    setApprovalNote('')
  }

  const handleReject = () => {
    console.log('Rejecting story with reason:', rejectionReason)
    setShowRejectionModal(false)
    setRejectionReason('')
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Link
            href="/admin/stories"
            className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg"
          >
            <ArrowLeft size={20} />
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Story Review</h1>
            <p className="text-gray-600">Review and moderate submitted content</p>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex space-x-3">
          <button
            onClick={() => setShowRejectionModal(true)}
            className="flex items-center space-x-2 px-4 py-2 border border-red-300 text-red-700 rounded-lg hover:bg-red-50"
          >
            <XCircle size={16} />
            <span>Reject</span>
          </button>
          <button
            onClick={() => setShowApprovalModal(true)}
            className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
          >
            <CheckCircle size={16} />
            <span>Approve</span>
          </button>
        </div>
      </div>

      {/* Story Info Card */}
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="flex items-start space-x-6">
          <Image
            src={mockStory.featuredImage}
            alt={mockStory.title}
            width={200}
            height={120}
            className="rounded-lg object-cover"
          />
          <div className="flex-1">
            <div className="flex items-start justify-between">
              <div>
                <h2 className="text-xl font-bold text-gray-900">{mockStory.title}</h2>
                <div className="flex items-center mt-2 space-x-4 text-sm text-gray-600">
                  <div className="flex items-center space-x-2">
                    <Image
                      src={mockStory.author.avatar}
                      alt={mockStory.author.name}
                      width={20}
                      height={20}
                      className="rounded-full"
                    />
                    <span>by {mockStory.author.name}</span>
                  </div>
                  <span>•</span>
                  <span>{mockStory.genre}</span>
                  <span>•</span>
                  <span>{mockStory.wordCount} words</span>
                  <span>•</span>
                  <span>{mockStory.readTime}</span>
                </div>
                <p className="mt-3 text-gray-700">{mockStory.excerpt}</p>
                <div className="flex flex-wrap gap-2 mt-3">
                  {mockStory.hashtags.map((tag, index) => (
                    <span key={index} className="px-2 py-1 bg-gray-100 text-gray-600 text-sm rounded">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
              <div className="text-right">
                <div className="flex items-center space-x-2 mb-2">
                  <span className="px-3 py-1 bg-yellow-100 text-yellow-800 text-sm font-medium rounded-full">
                    Pending Review
                  </span>
                  <span className="px-3 py-1 bg-red-100 text-red-800 text-sm font-medium rounded-full">
                    High Priority
                  </span>
                </div>
                <div className="text-sm text-gray-500">
                  <div className="flex items-center justify-end space-x-1 mb-1">
                    <Calendar size={14} />
                    <span>Submitted {formatDate(mockStory.submittedAt)}</span>
                  </div>
                  {mockStory.reports.length > 0 && (
                    <div className="flex items-center justify-end space-x-1 text-red-600">
                      <AlertTriangle size={14} />
                      <span>{mockStory.reports.length} report(s)</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          {[
            { id: 'content', label: 'Content', icon: FileText },
            { id: 'author', label: 'Author Info', icon: User },
            { id: 'reports', label: 'Reports', icon: Flag, badge: mockStory.reports.length },
            { id: 'history', label: 'History', icon: Clock }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.id
                  ? 'border-purple-500 text-purple-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <tab.icon size={16} />
              <span>{tab.label}</span>
              {tab.badge && tab.badge > 0 && (
                <span className="ml-2 bg-red-100 text-red-600 text-xs font-medium px-2 py-0.5 rounded-full">
                  {tab.badge}
                </span>
              )}
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      <div className="bg-white rounded-lg border border-gray-200">
        {activeTab === 'content' && (
          <div className="p-6">
            <div className="prose max-w-none">
              <div className="whitespace-pre-wrap text-gray-800 leading-relaxed">
                {mockStory.content}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'author' && (
          <div className="p-6">
            <div className="flex items-start space-x-6">
              <Image
                src={mockStory.author.avatar}
                alt={mockStory.author.name}
                width={80}
                height={80}
                className="rounded-full"
              />
              <div className="flex-1">
                <div className="flex items-center space-x-2">
                  <h3 className="text-lg font-semibold text-gray-900">{mockStory.author.name}</h3>
                  {mockStory.author.verified && (
                    <CheckCircle className="h-5 w-5 text-blue-500" />
                  )}
                </div>
                <p className="text-gray-600">@{mockStory.author.username}</p>
                <p className="text-gray-600">{mockStory.author.email}</p>
                <p className="mt-2 text-gray-700">{mockStory.author.bio}</p>
                
                <div className="grid grid-cols-4 gap-4 mt-4">
                  <div className="text-center">
                    <div className="text-xl font-bold text-gray-900">{mockStory.author.stats.stories}</div>
                    <div className="text-sm text-gray-600">Stories</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-bold text-gray-900">{mockStory.author.stats.followers}</div>
                    <div className="text-sm text-gray-600">Followers</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-bold text-gray-900">{mockStory.author.stats.following}</div>
                    <div className="text-sm text-gray-600">Following</div>
                  </div>
                  <div className="text-center">
                    <div className="text-xl font-bold text-gray-900">{mockStory.author.stats.likes}</div>
                    <div className="text-sm text-gray-600">Total Likes</div>
                  </div>
                </div>

                <div className="mt-4 text-sm text-gray-500">
                  Joined {formatDate(mockStory.author.joinDate)}
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'reports' && (
          <div className="p-6">
            {mockStory.reports.length > 0 ? (
              <div className="space-y-4">
                {mockStory.reports.map((report) => (
                  <div key={report.id} className="border border-red-200 rounded-lg p-4 bg-red-50">
                    <div className="flex items-start justify-between">
                      <div>
                        <h4 className="font-medium text-red-900">{report.reason}</h4>
                        <p className="text-sm text-red-700 mt-1">{report.description}</p>
                        <div className="text-xs text-red-600 mt-2">
                          Reported by {report.reportedBy} on {formatDate(report.reportedAt)}
                        </div>
                      </div>
                      <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs font-medium rounded">
                        {report.status}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <Flag className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">No reports</h3>
                <p className="mt-1 text-sm text-gray-500">This story has not been reported.</p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'history' && (
          <div className="p-6">
            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <div className="flex-shrink-0 w-2 h-2 mt-2 bg-blue-400 rounded-full" />
                <div>
                  <p className="text-sm text-gray-900">Story submitted for review</p>
                  <p className="text-xs text-gray-500">{formatDate(mockStory.submittedAt)}</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Approval Modal */}
      {showApprovalModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Approve Story</h3>
            <p className="text-gray-600 mb-4">
              Are you sure you want to approve "{mockStory.title}"? This will make it visible to all users.
            </p>
            <textarea
              value={approvalNote}
              onChange={(e) => setApprovalNote(e.target.value)}
              placeholder="Add a note (optional)"
              className="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
              rows={3}
            />
            <div className="flex justify-end space-x-3 mt-4">
              <button
                onClick={() => setShowApprovalModal(false)}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleApprove}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                Approve Story
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Rejection Modal */}
      {showRejectionModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Reject Story</h3>
            <p className="text-gray-600 mb-4">
              Please provide a reason for rejecting "{mockStory.title}". This will be sent to the author.
            </p>
            <textarea
              value={rejectionReason}
              onChange={(e) => setRejectionReason(e.target.value)}
              placeholder="Reason for rejection (required)"
              className="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
              rows={4}
              required
            />
            <div className="flex justify-end space-x-3 mt-4">
              <button
                onClick={() => setShowRejectionModal(false)}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleReject}
                disabled={!rejectionReason.trim()}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Reject Story
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
